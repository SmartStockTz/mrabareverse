var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ConstantUtil } from "./constant.util";
// @ts-ignore
import * as sha1 from "js-sha1";
// export function set(
//     value: { id: string, [key: string]: any }, yMap: YMap<any> | undefined
// ): { s: boolean, m: string, r: string } {
//     if (!yMap || !value) {
//         return {
//             s: false,
//             m: 'one of parameter is null',
//             r: 'no',
//         };
//     }
//     if (value._created_at && typeof value._created_at === "string") {
//         value.createdAt = value._created_at;
//         delete value._created_at;
//     }
//     if (value._updated_at && typeof value._updated_at === "string") {
//         value.updatedAt = value._updated_at;
//         delete value._updated_at;
//     }
//     if (typeof value?.createdAt === "object") {
//         value.createdAt = '2020-09-01';
//     }
//     if (typeof value?.updatedAt === "object") {
//         value.updatedAt = '2020-09-01';
//     }
//     if (!value.hasOwnProperty('createdAt')) {
//         value.createdAt = new Date()
//     }
//     if (!value.hasOwnProperty('updatedAt')) {
//         value.updatedAt = new Date()
//     }
//     if (value.hasOwnProperty('id')) {
//         yMap.set(value.id, value);
//         return {
//             m: 'done',
//             s: true,
//             r: 'Ok'
//         }
//     } else {
//         return {
//             s: false,
//             m: 'please doc must have id field',
//             r: JSON.stringify(value, null, 4)
//         };
//         // throw {message: 'please doc must have id/_id field', data: JSON.stringify(value, null, 4)};
//     }
// }
export function addSyncs(data, database, cacheAdapter) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        if (!((_a = data === null || data === void 0 ? void 0 : data.payload) === null || _a === void 0 ? void 0 : _a.hasOwnProperty('id'))) {
            console.log('can not add data for syncs it does not have id field');
            return null;
        }
        const _sha1 = yield sha1(JSON.stringify(data));
        return cacheAdapter.set(_sha1, data, database, ConstantUtil.SYNCS_TABLE);
    });
}
export function getSyncsKeys(database, cacheAdapter) {
    return __awaiter(this, void 0, void 0, function* () {
        return cacheAdapter.keys(database, ConstantUtil.SYNCS_TABLE);
    });
}
export function getAllSyncs(database, cacheAdapter) {
    return __awaiter(this, void 0, void 0, function* () {
        return cacheAdapter.getAll(database, ConstantUtil.SYNCS_TABLE);
    });
}
export function getOneSyncs(database, key, cacheAdapter) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield cacheAdapter.get(key, database, ConstantUtil.SYNCS_TABLE);
    });
}
export function removeOneSyncs(key, database, cacheAdapter) {
    return __awaiter(this, void 0, void 0, function* () {
        return cacheAdapter.remove(key, database, ConstantUtil.SYNCS_TABLE);
    });
}
export function removeAllSyncs(database, cacheAdapter) {
    return __awaiter(this, void 0, void 0, function* () {
        return cacheAdapter.clearAll(database, ConstantUtil.SYNCS_TABLE);
    });
}
