var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getConfig } from '../bfast';
export class DefaultAuthFactory {
    constructor(httpClientController) {
        this.httpClientController = httpClientController;
    }
    authenticated(userId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return undefined;
        });
    }
    logIn(username, password, appName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const authRule = {};
            Object.assign(authRule, {
                'applicationId': getConfig().credential(appName).applicationId
            });
            Object.assign(authRule, {
                auth: {
                    signIn: {
                        username,
                        password
                    }
                }
            });
            const response = yield this.httpClientController.post(getConfig().databaseURL(appName), authRule, {
                headers: {}
            }, {
                context: '_User',
                type: 'daas',
                rule: 'auth',
                token: null,
            });
            const data = response.data;
            if (data && data.auth && data.auth.signIn) {
                return data.auth.signIn;
            }
            else {
                throw { message: data.errors && data.errors['auth.signIn'] ? data.errors['auth.signIn'].message : 'Username/Password is not valid' };
            }
        });
    }
    logOut(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return true;
        });
    }
    requestPasswordReset(email, appName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const authRule = {};
            Object.assign(authRule, {
                'applicationId': getConfig().credential(appName).applicationId
            });
            Object.assign(authRule, {
                auth: {
                    reset: {
                        email
                    }
                }
            });
            const response = yield this.httpClientController.post(getConfig().databaseURL(appName), authRule, {
                headers: {
                    'x-bfast-application-id': getConfig().credential(appName).applicationId
                }
            }, {
                context: '_User',
                type: 'daas',
                rule: 'auth',
                token: null
            });
            const data = response.data;
            if (data && data.auth && data.auth.reset) {
                return data.auth.reset;
            }
            else {
                throw { message: data.errors && data.errors.auth && data.errors['auth.reset'] ? data.errors['auth.reset'].message : 'Fails to reset password' };
            }
        });
    }
    signUp(username, password, attrs = {}, appName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const authRule = {};
            Object.assign(authRule, {
                'applicationId': getConfig().credential(appName).applicationId
            });
            Object.assign(attrs, {
                username,
                password
            });
            attrs.email = attrs.email ? attrs.email : '';
            Object.assign(authRule, {
                auth: {
                    signUp: attrs
                }
            });
            const response = yield this.httpClientController.post(getConfig().databaseURL(appName), authRule, {
                headers: {
                    'x-parse-application-id': getConfig().credential(appName).applicationId
                }
            }, {
                context: '_User',
                type: 'daas',
                rule: 'auth',
                token: null,
            });
            const data = response.data;
            if (data && data.auth && data.auth.signUp) {
                return data.auth.signUp;
            }
            else {
                let message = data.errors && data.errors['auth.signUp'] ? data.errors['auth.signUp'].message : 'Username/Email already exist';
                if (message.toString().includes('E11000')) {
                    message = 'Username/Email already exist';
                }
                throw { message: message };
            }
        });
    }
    updateUser(id, attrs, options) {
        throw { message: "Not supported, use _User collection in your secure env with masterKey to update user details" };
        // const user = await this.currentUser();
        // if (user && user.token) {
        //     const postHeaders = this._geHeadersWithToken(user, options);
        //     const response = await this.restApi.put<UserModel>(
        //         getConfig().databaseURL(this.appName, '/users/' + user.objectId),
        //         userModel, {
        //             headers: postHeaders
        //         });
        //     delete userModel.password;
        //     const data = response.data;
        //     data.token = data.sessionToken;
        //     Object.assign(user, data);
        //     Object.assign(user, userModel);
        //     await this.cacheAdapter.set<T>('_current_user_', user as T, {
        //         dtl: 30
        //     });
        //     return user;
        // } else {
        //     throw new Error('No current user in your device');
        // }
    }
    requestEmailVerification(email, appName, options) {
        throw 'Not supported yet use your implementation';
    }
}
