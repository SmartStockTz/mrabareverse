var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { isBrowser, isElectron, isWebWorker } from "../utils/platform.util";
import { Dexie } from "dexie";
// @ts-ignore
import * as sha1 from "js-sha1";
export class DefaultCacheFactory {
    constructor() {
    }
    getAll(database, collection) {
        return __awaiter(this, void 0, void 0, function* () {
            if (isElectron || isBrowser || isWebWorker) {
                return this.withDexie(database, collection, (table1) => __awaiter(this, void 0, void 0, function* () {
                    // const keys = await this.keys(database, collection);
                    return table1.toCollection().toArray();
                    // if (Array.isArray(keys)) {
                    //     return await table1.bulkGet(keys) as any[];
                    // }
                    // return [];
                }));
            }
            return [];
        });
    }
    withDexie(dbname, collection, fn) {
        return __awaiter(this, void 0, void 0, function* () {
            if (isElectron || isBrowser || isWebWorker) {
                const database = dbname + collection;
                const db = new Dexie(yield sha1(database.trim()));
                db.version(1).stores({
                    [collection]: ""
                }).upgrade(_ => {
                    console.log('index db upgraded');
                });
                try {
                    db.open();
                    return yield fn(db.table(collection));
                }
                finally {
                    db.close();
                }
            }
            return undefined;
        });
    }
    keys(database, collection) {
        return __awaiter(this, void 0, void 0, function* () {
            if (isElectron || isBrowser || isWebWorker) {
                return this.withDexie(database, collection, (table1) => __awaiter(this, void 0, void 0, function* () {
                    const keys = yield table1.toCollection().keys();
                    if (Array.isArray(keys)) {
                        return keys;
                    }
                    else {
                        return [];
                    }
                }));
            }
            return [];
        });
    }
    clearAll(database, collection) {
        return __awaiter(this, void 0, void 0, function* () {
            if (isElectron || isBrowser || isWebWorker) {
                return this.withDexie(database, collection, (table1) => __awaiter(this, void 0, void 0, function* () {
                    yield table1.clear();
                    return true;
                }));
            }
            return true;
        });
    }
    get(key, database, collection) {
        return __awaiter(this, void 0, void 0, function* () {
            if (isElectron || isBrowser || isWebWorker) {
                return this.withDexie(database, collection, table1 => {
                    return table1.get(key);
                });
            }
            return null;
        });
    }
    getBulk(keys, database, collection) {
        return __awaiter(this, void 0, void 0, function* () {
            if (isElectron || isBrowser || isWebWorker) {
                return this.withDexie(database, collection, (table1) => __awaiter(this, void 0, void 0, function* () {
                    if (Array.isArray(keys)) {
                        return yield table1.bulkGet(keys);
                    }
                    return [];
                }));
            }
            return [];
        });
    }
    set(key, data, database, collection, options = { secure: false }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (isElectron || isBrowser || isWebWorker) {
                return this.withDexie(database, collection, (table1) => __awaiter(this, void 0, void 0, function* () {
                    yield (table1 === null || table1 === void 0 ? void 0 : table1.put(data, key));
                    return data;
                }));
            }
            return null;
        });
    }
    setBulk(keys, data, database, collection) {
        return __awaiter(this, void 0, void 0, function* () {
            if (isElectron || isBrowser || isWebWorker) {
                return this.withDexie(database, collection, (table1) => __awaiter(this, void 0, void 0, function* () {
                    yield (table1 === null || table1 === void 0 ? void 0 : table1.bulkPut(data, keys, { allKeys: true }));
                    return keys;
                }));
            }
            return null;
        });
    }
    remove(key, database, collection, force = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (isElectron || isBrowser || isWebWorker) {
                return this.withDexie(database, collection, (table1) => __awaiter(this, void 0, void 0, function* () {
                    yield (table1 === null || table1 === void 0 ? void 0 : table1.delete(key));
                    return true;
                }));
            }
            return true;
        });
    }
    cacheEnabled(appName, options) {
        return true;
    }
}
