var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// @ts-ignore
import axios from "axios";
export class DefaultHttpClientFactory {
    delete(url, config, info) {
        return __awaiter(this, void 0, void 0, function* () {
            return axios.delete(url, config);
        });
    }
    get(url, config, info) {
        return __awaiter(this, void 0, void 0, function* () {
            return axios.get(url, config);
        });
    }
    head(url, config, info) {
        return __awaiter(this, void 0, void 0, function* () {
            return axios.head(url, config);
        });
    }
    options(url, config, info) {
        return __awaiter(this, void 0, void 0, function* () {
            return axios.options(url, config);
        });
    }
    patch(url, data, config, info) {
        return __awaiter(this, void 0, void 0, function* () {
            return axios.patch(url, data, config);
        });
    }
    post(url, data, config, info) {
        return __awaiter(this, void 0, void 0, function* () {
            config = Object.assign(config, {
                maxContentLength: Infinity,
                maxBodyLength: Infinity,
            });
            return axios.post(url, data, config);
        });
    }
    put(url, data, config, info) {
        return __awaiter(this, void 0, void 0, function* () {
            return axios.put(url, data, config);
        });
    }
}
