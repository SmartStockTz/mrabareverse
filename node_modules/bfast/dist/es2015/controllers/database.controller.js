var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { QueryController } from "./query.controller";
import { extractResultFromServer } from "../utils/data.util";
import { AggregateController } from "./aggregate.controller";
import { getConfig } from '../bfast';
export class DatabaseController {
    constructor(domainName, httpClientController, rulesController, authController, appName) {
        this.domainName = domainName;
        this.httpClientController = httpClientController;
        this.rulesController = rulesController;
        this.authController = authController;
        this.appName = appName;
    }
    save(model, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const credential = getConfig().credential(this.appName);
            const createRule = yield this.rulesController.createRule(this.domainName, model, credential, options);
            const response = yield this.httpClientController.post(`${getConfig().databaseURL(this.appName)}`, createRule, {
                headers: {}
            }, {
                context: this.domainName,
                rule: `create${this.domainName}`,
                type: 'daas',
                token: yield this.authController.getToken()
            });
            return extractResultFromServer(response.data, 'create', this.domainName);
        });
    }
    getAll(query, options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const totalCount = query && query.size ? query.size : yield this.query().count(true).find(options);
                return yield this.query()
                    .skip(query && query.skip ? query.skip : 0)
                    .size(totalCount)
                    // .cids(query && query.cids ? query.cids : false)
                    .hashes(query && query.hashes ? query.hashes : [])
                    .find(options);
            }
            catch (e) {
                throw { message: DatabaseController._getErrorMessage(e ? e : 'unknown error') };
            }
        });
    }
    get(id, 
    // cids = false,
    options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.query()
                .byId(id)
                .hashes([])
                // .cids(cids)
                .find(options);
        });
    }
    query() {
        return new QueryController(this.domainName, this.httpClientController, this.rulesController, this.authController, this.appName);
    }
    aggregate() {
        return new AggregateController(this.domainName, this.httpClientController, this.rulesController, this.authController, this.appName);
    }
    static _getErrorMessage(e) {
        if (e.message) {
            return e.message;
        }
        else {
            return (e && e.response && e.response.data) ? e.response.data : e.toString();
        }
    }
}
