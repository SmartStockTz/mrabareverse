var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getConfig } from '../bfast';
export class BulkController {
    constructor(appName, httpClientController, rulesController, authController) {
        this.appName = appName;
        this.httpClientController = httpClientController;
        this.rulesController = rulesController;
        this.authController = authController;
        this.transactionRequests = [];
    }
    commit(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options && options.before) {
                const result = yield options.before(this.transactionRequests);
                if (result && Array.isArray(result) && result.length > 0) {
                    this.transactionRequests = result;
                }
                else if (result && Array.isArray(result) && result.length === 0) {
                    this.transactionRequests = result;
                }
            }
            const credential = getConfig().credential(this.appName);
            const transactionRule = yield this.rulesController.bulk(this.transactionRequests, credential, { useMasterKey: options === null || options === void 0 ? void 0 : options.useMasterKey });
            const response = yield this.httpClientController.post(getConfig().databaseURL(this.appName), transactionRule, {
                headers: {
                    'x-parse-application-id': credential.applicationId
                }
            }, {
                context: 'bulk',
                rule: 'bulk',
                type: 'daas',
                token: yield this.authController.getToken()
            });
            this.transactionRequests.splice(0);
            if (options && options.after) {
                options.after().catch(_ => {
                });
            }
            return BulkController._extractResultFromServer(response.data);
        });
    }
    create(domain, data) {
        this.transactionRequests.push({
            data,
            action: "create",
            domain
        });
        return this;
    }
    delete(domain, payload) {
        this.transactionRequests.push({
            domain,
            action: "delete",
            data: payload
        });
        return this;
    }
    update(domain, payload) {
        this.transactionRequests.push({
            domain,
            action: "update",
            data: payload
        });
        return this;
    }
    static _extractResultFromServer(data) {
        var _a;
        if (data && data.hasOwnProperty('transaction')) {
            (_a = data['transaction'].commit) === null || _a === void 0 ? true : delete _a.errors;
            return data.transaction.commit;
        }
        else {
            if (data && data.errors && data.errors.hasOwnProperty('transaction')) {
                throw data.errors['transaction'];
            }
            else {
                throw { message: 'Fail to process a result', errors: data.errors };
            }
        }
    }
}
