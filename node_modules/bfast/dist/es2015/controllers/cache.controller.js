var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { addSyncs, getAllSyncs, getOneSyncs, getSyncsKeys, removeAllSyncs, removeOneSyncs } from '../utils/syncs.util';
import { getConfig } from '../bfast';
export class CacheController {
    constructor(appName, database, collection, cacheAdapter) {
        this.appName = appName;
        this.database = database;
        this.collection = collection;
        this.cacheAdapter = cacheAdapter;
        if (database && !database.startsWith('bfast/')) {
            this.database = getConfig().cacheDatabaseName(database, appName);
        }
        this.collection = getConfig().cacheCollectionName(collection, appName);
    }
    keys() {
        return __awaiter(this, void 0, void 0, function* () {
            const keys = yield this.cacheAdapter.keys(this.database, this.collection);
            return keys && Array.isArray(keys) ? keys : [];
        });
    }
    clearAll() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.cacheAdapter.clearAll(this.database, this.collection);
        });
    }
    get(key, options = { secure: false }) {
        return __awaiter(this, void 0, void 0, function* () {
            // if (!key) {
            //     throw {message: 'key of the data to retrieve required'};
            // }
            return this.cacheAdapter.get(key, this.database, this.collection);
        });
    }
    getBulk(keys, options = { secure: false }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Array.isArray(keys)) {
                throw { message: 'Array of keys required' };
            }
            return this.cacheAdapter.getBulk(keys, this.database, this.collection);
        });
    }
    getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.cacheAdapter.getAll(this.database, this.collection);
        });
    }
    query(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            const all = yield this.getAll();
            return filter(all);
        });
    }
    set(key, data, options = { secure: false }) {
        return __awaiter(this, void 0, void 0, function* () {
            // if (!key) {
            //     throw {message: 'key for the data is required'};
            // }
            // if (!data) {
            //     throw {message: 'data to save to cache required'};
            // }
            return this.cacheAdapter.set(key, data, this.database, this.collection);
        });
    }
    setBulk(keys, data, options = { secure: false }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Array.isArray(keys)) {
                throw { message: 'Array of keys required' };
            }
            if (!Array.isArray(data)) {
                throw { message: 'Array of data required' };
            }
            return this.cacheAdapter.setBulk(keys, data, this.database, this.collection);
        });
    }
    remove(key, force = true) {
        return __awaiter(this, void 0, void 0, function* () {
            // if (!key) {
            //     throw {message: 'key for data to remove required'};
            // }
            return this.cacheAdapter.remove(key, this.database, this.collection, true);
        });
    }
    addSyncs(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return addSyncs(data, this.database, this.cacheAdapter);
        });
    }
    removeOneSyncs(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return removeOneSyncs(key, this.database, this.cacheAdapter);
        });
    }
    removeAllSyncs() {
        return __awaiter(this, void 0, void 0, function* () {
            return removeAllSyncs(this.database, this.cacheAdapter);
        });
    }
    getAllSyncs() {
        return __awaiter(this, void 0, void 0, function* () {
            return getAllSyncs(this.database, this.cacheAdapter);
        });
    }
    getOneSyncs(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return getOneSyncs(this.database, key, this.cacheAdapter);
        });
    }
    getSyncsKeys() {
        return __awaiter(this, void 0, void 0, function* () {
            return getSyncsKeys(this.database, this.cacheAdapter);
        });
    }
}
