var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class HttpClientController {
    constructor(appName, httpClientAdapter) {
        this.appName = appName;
        this.httpClientAdapter = httpClientAdapter;
    }
    addTokenToHeaders(config, token) {
        return __awaiter(this, void 0, void 0, function* () {
            // token = token ? token : '';
            // const headers = Object.assign(config && config.headers ? config.headers : {}, {
            //     'x-bfast-token': token.toString().trim()
            // });
            if (config) {
                // config.headers = headers;
                return config;
            }
            else {
                return {};
            }
        });
    }
    delete(url, config, requestInfoModel) {
        return __awaiter(this, void 0, void 0, function* () {
            config = yield this.addTokenToHeaders(config, requestInfoModel.token);
            return this.httpClientAdapter.delete(url, config, requestInfoModel);
        });
    }
    get(url, config, requestInfoModel) {
        return __awaiter(this, void 0, void 0, function* () {
            config = yield this.addTokenToHeaders(config, requestInfoModel.token);
            return this.httpClientAdapter.get(url, config, requestInfoModel);
        });
    }
    head(url, config, requestInfoModel) {
        return __awaiter(this, void 0, void 0, function* () {
            config = yield this.addTokenToHeaders(config, requestInfoModel.token);
            return this.httpClientAdapter.head(url, config, requestInfoModel);
        });
    }
    options(url, config, requestInfoModel) {
        return __awaiter(this, void 0, void 0, function* () {
            config = yield this.addTokenToHeaders(config, requestInfoModel.token);
            return this.httpClientAdapter.options(url, config, requestInfoModel);
        });
    }
    patch(url, data, config, requestInfoModel) {
        return __awaiter(this, void 0, void 0, function* () {
            config = yield this.addTokenToHeaders(config, requestInfoModel.token);
            return this.httpClientAdapter.patch(url, data, config, requestInfoModel);
        });
    }
    post(url, data, config, requestInfoModel) {
        return __awaiter(this, void 0, void 0, function* () {
            config = yield this.addTokenToHeaders(config, requestInfoModel.token);
            return this.httpClientAdapter.post(url, data, config, requestInfoModel);
        });
    }
    put(url, data, config, requestInfoModel) {
        return __awaiter(this, void 0, void 0, function* () {
            config = yield this.addTokenToHeaders(config, requestInfoModel.token);
            return this.httpClientAdapter.put(url, data, config, requestInfoModel);
        });
    }
}
