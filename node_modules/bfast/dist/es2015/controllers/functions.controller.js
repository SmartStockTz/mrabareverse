var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BFastConfig } from "../conf";
import { getConfig } from '../bfast';
export class FunctionsController {
    constructor(functionPath, httpClientController, authController, appName = BFastConfig.DEFAULT_APP) {
        this.functionPath = functionPath;
        this.httpClientController = httpClientController;
        this.authController = authController;
        this.appName = appName;
    }
    post(body, config) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.functionPath && this.functionPath !== '') {
                const postConfig = {};
                if (config && config.headers) {
                    Object.assign(postConfig, config);
                }
                else {
                    Object.assign(postConfig, config);
                }
                return this.httpClientController.post(getConfig().functionsURL(this.functionPath, this.appName), body ? body : {}, postConfig, {
                    context: '_Rest',
                    rule: 'functions',
                    type: 'faas',
                    token: yield this.authController.getToken()
                }).then(response => {
                    return response.data;
                }).catch(reason => {
                    throw reason && reason.response && reason.response.data
                        ? reason.response.data
                        : { message: reason.toString() };
                });
            }
            else {
                throw { code: -1, message: 'Please provide function path' };
            }
        });
    }
    delete(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteConfig = {};
            if (config && config.headers) {
                Object.assign(deleteConfig, config);
            }
            else {
                Object.assign(deleteConfig, config);
            }
            return this.httpClientController.delete(getConfig().functionsURL(this.functionPath, this.appName), deleteConfig, {
                context: '_Rest',
                rule: 'functions',
                type: 'faas',
                token: yield this.authController.getToken()
            }).then(response => {
                return response.data;
            }).catch(reason => {
                throw reason && reason.response && reason.response.data
                    ? reason.response.data
                    : { message: reason.toString() };
            });
        });
    }
    get(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const getConfig_ = {};
            if (config && config.headers) {
                Object.assign(getConfig_, config);
            }
            else {
                Object.assign(getConfig_, config);
            }
            return this.httpClientController.get(getConfig().functionsURL(this.functionPath, this.appName), getConfig_, {
                context: '_Rest',
                rule: 'functions',
                type: 'faas',
                token: yield this.authController.getToken()
            }).then(response => {
                return response.data;
            }).catch(reason => {
                throw reason && reason.response && reason.response.data
                    ? reason.response.data
                    : { message: reason.toString() };
            });
        });
    }
    put(body, config) {
        return __awaiter(this, void 0, void 0, function* () {
            const putConfig = {};
            if (config && config.headers) {
                Object.assign(putConfig, config);
            }
            else {
                Object.assign(putConfig, config);
            }
            return this.httpClientController.put(getConfig().functionsURL(this.functionPath, this.appName), body ? body : {}, putConfig, {
                context: '_Rest',
                rule: 'functions',
                type: 'faas',
                token: yield this.authController.getToken()
            }).then(response => {
                return response.data;
            }).catch(reason => {
                throw reason && reason.response && reason.response.data
                    ? reason.response.data
                    : { message: reason.toString() };
            });
        });
    }
}
