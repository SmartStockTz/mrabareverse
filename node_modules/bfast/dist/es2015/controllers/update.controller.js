var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { extractResultFromServer } from "../utils/data.util";
import { getConfig } from '../bfast';
export class UpdateController {
    constructor(domain, queryModel, appName, httpClientController, rulesController, authController) {
        this.domain = domain;
        this.queryModel = queryModel;
        this.appName = appName;
        this.httpClientController = httpClientController;
        this.rulesController = rulesController;
        this.authController = authController;
        this.updateModel = {
            $set: {},
            $inc: {},
            $unset: {}
        };
        this._upsert = false;
    }
    set(field, value) {
        if (field === 'id' || field === '_id') {
            if (!this.queryModel.filter) {
                this.queryModel.filter = {};
            }
            this.queryModel.filter.id = value;
            return this;
        }
        Object.assign(this.updateModel.$set, {
            [field]: value
        });
        return this;
    }
    unset(field) {
        if (field === 'id' || field === '_id') {
            return this;
        }
        Object.assign(this.updateModel.$unset, {
            [field]: 1
        });
        return this;
    }
    upsert(value = false) {
        this._upsert = value;
        return this;
    }
    doc(doc) {
        Object.assign(this.updateModel.$set, doc);
        return this;
    }
    increment(field, amount = 1) {
        Object.assign(this.updateModel.$inc, {
            [field]: amount
        });
        return this;
    }
    decrement(field, amount = 1) {
        return this.increment(field, -amount);
    }
    build() {
        return this.updateModel;
    }
    update(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const credential = getConfig().credential(this.appName);
            Object.keys(this.updateModel).forEach(key => {
                try {
                    // @ts-ignore
                    if (typeof this.updateModel[key] === "object" && Object.keys(this.updateModel[key]).length === 0) {
                        // @ts-ignore
                        delete this.updateModel[key];
                    }
                }
                catch (__23) {
                    console.log(__23);
                }
            });
            const updateRule = yield this.rulesController.updateRule(this.domain, this.queryModel, this.build(), this._upsert, credential, options);
            const response = yield this.httpClientController.post(getConfig().databaseURL(this.appName), updateRule, {}, {
                context: this.domain,
                rule: `update${this.domain}`,
                type: 'daas',
                token: yield this.authController.getToken()
            });
            return extractResultFromServer(response.data, 'update', this.domain);
        });
    }
}
