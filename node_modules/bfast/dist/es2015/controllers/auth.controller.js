var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ConstantUtil } from "../utils/constant.util";
export class AuthController {
    constructor(appName, cacheController, authAdapter) {
        this.appName = appName;
        this.cacheController = cacheController;
        this.authAdapter = authAdapter;
    }
    authenticated(userId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.authAdapter.authenticated(userId, options);
        });
    }
    currentUser() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const user = yield this.cacheController.get(ConstantUtil.CURRENT_USER_IDENTIFIER, { secure: true });
                if (!user) {
                    return null;
                }
                else if (typeof user === "string") {
                    yield this.setCurrentUser(null);
                    return null;
                }
                else {
                    return user;
                }
            }
            catch (e) {
                yield this.setCurrentUser(null);
                return null;
            }
        });
    }
    getEmail() {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield this.currentUser();
            if (user && user.email) {
                return user.email;
            }
            else {
                return null;
            }
        });
    }
    getToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield this.currentUser();
            if (user && user.token) {
                return user.token;
            }
            else {
                return null;
            }
        });
    }
    getUsername() {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield this.currentUser();
            if (user && user.username) {
                return user.username;
            }
            else {
                return null;
            }
        });
    }
    logIn(username, password, dtl = 6, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!username) {
                throw { message: "Username required" };
            }
            if (!password) {
                throw { message: "Password required" };
            }
            username = username.trim();
            password = password.trim();
            const user = yield this.authAdapter.logIn(username, password, this.appName, options);
            yield this.setCurrentUser(user, dtl);
            return user;
        });
    }
    logOut(options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setCurrentUser(null);
            return this.authAdapter.logOut(options);
        });
    }
    requestPasswordReset(email, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!email) {
                throw { message: "Email required to reset your account" };
            }
            return this.authAdapter.requestPasswordReset(email, this.appName, options);
        });
    }
    signUp(username, password, attrs = {}, dtl = 6, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!username) {
                throw { message: "Username required" };
            }
            if (!password) {
                throw { message: "Password required" };
            }
            username = username.trim();
            password = password.trim();
            const user = yield this.authAdapter.signUp(username, password, attrs, this.appName, options);
            yield this.setCurrentUser(user, dtl);
            return user;
        });
    }
    updateUser(userId, attrs = {}, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!userId) {
                throw { message: "Please provide id of user to be updated" };
            }
            return this.authAdapter.updateUser(userId, attrs, options);
        });
    }
    setCurrentUser(user, dtl = 6) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.cacheController.set(ConstantUtil.CURRENT_USER_IDENTIFIER, user, {
                secure: true
            });
            return user;
        });
    }
    requestEmailVerification(email, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!email) {
                throw { message: "Email required" };
            }
            return this.authAdapter.requestEmailVerification(email, this.appName, options);
        });
    }
}
