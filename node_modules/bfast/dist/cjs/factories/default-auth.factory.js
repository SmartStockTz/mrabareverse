"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultAuthFactory = void 0;
var bfast_1 = require("../bfast");
var DefaultAuthFactory = /** @class */ (function () {
    function DefaultAuthFactory(httpClientController) {
        this.httpClientController = httpClientController;
    }
    DefaultAuthFactory.prototype.authenticated = function (userId, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, undefined];
            });
        });
    };
    DefaultAuthFactory.prototype.logIn = function (username, password, appName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var authRule, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authRule = {};
                        Object.assign(authRule, {
                            'applicationId': (0, bfast_1.getConfig)().credential(appName).applicationId
                        });
                        Object.assign(authRule, {
                            auth: {
                                signIn: {
                                    username: username,
                                    password: password
                                }
                            }
                        });
                        return [4 /*yield*/, this.httpClientController.post((0, bfast_1.getConfig)().databaseURL(appName), authRule, {
                                headers: {}
                            }, {
                                context: '_User',
                                type: 'daas',
                                rule: 'auth',
                                token: null,
                            })];
                    case 1:
                        response = _a.sent();
                        data = response.data;
                        if (data && data.auth && data.auth.signIn) {
                            return [2 /*return*/, data.auth.signIn];
                        }
                        else {
                            throw { message: data.errors && data.errors['auth.signIn'] ? data.errors['auth.signIn'].message : 'Username/Password is not valid' };
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    DefaultAuthFactory.prototype.logOut = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, true];
            });
        });
    };
    DefaultAuthFactory.prototype.requestPasswordReset = function (email, appName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var authRule, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authRule = {};
                        Object.assign(authRule, {
                            'applicationId': (0, bfast_1.getConfig)().credential(appName).applicationId
                        });
                        Object.assign(authRule, {
                            auth: {
                                reset: {
                                    email: email
                                }
                            }
                        });
                        return [4 /*yield*/, this.httpClientController.post((0, bfast_1.getConfig)().databaseURL(appName), authRule, {
                                headers: {
                                    'x-bfast-application-id': (0, bfast_1.getConfig)().credential(appName).applicationId
                                }
                            }, {
                                context: '_User',
                                type: 'daas',
                                rule: 'auth',
                                token: null
                            })];
                    case 1:
                        response = _a.sent();
                        data = response.data;
                        if (data && data.auth && data.auth.reset) {
                            return [2 /*return*/, data.auth.reset];
                        }
                        else {
                            throw { message: data.errors && data.errors.auth && data.errors['auth.reset'] ? data.errors['auth.reset'].message : 'Fails to reset password' };
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    DefaultAuthFactory.prototype.signUp = function (username, password, attrs, appName, options) {
        if (attrs === void 0) { attrs = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var authRule, response, data, message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authRule = {};
                        Object.assign(authRule, {
                            'applicationId': (0, bfast_1.getConfig)().credential(appName).applicationId
                        });
                        Object.assign(attrs, {
                            username: username,
                            password: password
                        });
                        attrs.email = attrs.email ? attrs.email : '';
                        Object.assign(authRule, {
                            auth: {
                                signUp: attrs
                            }
                        });
                        return [4 /*yield*/, this.httpClientController.post((0, bfast_1.getConfig)().databaseURL(appName), authRule, {
                                headers: {
                                    'x-parse-application-id': (0, bfast_1.getConfig)().credential(appName).applicationId
                                }
                            }, {
                                context: '_User',
                                type: 'daas',
                                rule: 'auth',
                                token: null,
                            })];
                    case 1:
                        response = _a.sent();
                        data = response.data;
                        if (data && data.auth && data.auth.signUp) {
                            return [2 /*return*/, data.auth.signUp];
                        }
                        else {
                            message = data.errors && data.errors['auth.signUp'] ? data.errors['auth.signUp'].message : 'Username/Email already exist';
                            if (message.toString().includes('E11000')) {
                                message = 'Username/Email already exist';
                            }
                            throw { message: message };
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    DefaultAuthFactory.prototype.updateUser = function (id, attrs, options) {
        throw { message: "Not supported, use _User collection in your secure env with masterKey to update user details" };
        // const user = await this.currentUser();
        // if (user && user.token) {
        //     const postHeaders = this._geHeadersWithToken(user, options);
        //     const response = await this.restApi.put<UserModel>(
        //         getConfig().databaseURL(this.appName, '/users/' + user.objectId),
        //         userModel, {
        //             headers: postHeaders
        //         });
        //     delete userModel.password;
        //     const data = response.data;
        //     data.token = data.sessionToken;
        //     Object.assign(user, data);
        //     Object.assign(user, userModel);
        //     await this.cacheAdapter.set<T>('_current_user_', user as T, {
        //         dtl: 30
        //     });
        //     return user;
        // } else {
        //     throw new Error('No current user in your device');
        // }
    };
    DefaultAuthFactory.prototype.requestEmailVerification = function (email, appName, options) {
        throw 'Not supported yet use your implementation';
    };
    return DefaultAuthFactory;
}());
exports.DefaultAuthFactory = DefaultAuthFactory;
