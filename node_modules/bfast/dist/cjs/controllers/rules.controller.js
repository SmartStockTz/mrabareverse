"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RulesController = void 0;
var RulesController = /** @class */ (function () {
    function RulesController() {
    }
    RulesController.prototype.createRule = function (domain, data, appCredential, options) {
        return __awaiter(this, void 0, void 0, function () {
            var createRule;
            var _a;
            return __generator(this, function (_b) {
                createRule = {};
                if (options && (options === null || options === void 0 ? void 0 : options.useMasterKey) === true) {
                    Object.assign(createRule, {
                        masterKey: appCredential.appPassword
                    });
                }
                Object.assign(createRule, {
                    applicationId: appCredential.applicationId
                });
                if (data !== null && data !== undefined) {
                    if (Array.isArray(data)) {
                        data.map(function (x) {
                            x.return = (options === null || options === void 0 ? void 0 : options.returnFields) ? options.returnFields : [];
                            return x;
                        });
                    }
                    else {
                        data.return = (options === null || options === void 0 ? void 0 : options.returnFields) ? options.returnFields : [];
                    }
                    Object.assign(createRule, (_a = {},
                        _a["create" + domain] = data,
                        _a));
                    return [2 /*return*/, this.addToken(createRule)];
                }
                else {
                    throw { message: 'please provide data to save' };
                }
                return [2 /*return*/];
            });
        });
    };
    RulesController.prototype.deleteRule = function (domain, query, appCredential, options) {
        return __awaiter(this, void 0, void 0, function () {
            var deleteRule;
            var _a;
            return __generator(this, function (_b) {
                deleteRule = {};
                if (options && (options === null || options === void 0 ? void 0 : options.useMasterKey) === true) {
                    Object.assign(deleteRule, {
                        masterKey: appCredential.appPassword
                    });
                }
                Object.assign(deleteRule, (_a = {
                        applicationId: appCredential.applicationId
                    },
                    _a["delete" + domain] = query,
                    _a));
                return [2 /*return*/, this.addToken(deleteRule)];
            });
        });
    };
    RulesController.prototype.updateRule = function (domain, query, updateModel, upsert, appCredential, options) {
        return __awaiter(this, void 0, void 0, function () {
            var updateRule;
            var _a;
            return __generator(this, function (_b) {
                updateRule = {};
                if (options && options.useMasterKey === true) {
                    Object.assign(updateRule, {
                        masterKey: appCredential.appPassword
                    });
                }
                query.return = (options === null || options === void 0 ? void 0 : options.returnFields) ? options.returnFields : [];
                query.upsert = upsert;
                query.update = updateModel;
                Object.assign(updateRule, (_a = {
                        applicationId: appCredential.applicationId
                    },
                    _a["update" + domain] = query,
                    _a));
                return [2 /*return*/, this.addToken(updateRule)];
            });
        });
    };
    RulesController.prototype.updateManyRule = function (domain, payload, appCredential, options) {
        return __awaiter(this, void 0, void 0, function () {
            var updateRule, updateRequests;
            var _a;
            return __generator(this, function (_b) {
                updateRule = {};
                if (options && options.useMasterKey === true) {
                    Object.assign(updateRule, {
                        masterKey: appCredential.appPassword
                    });
                }
                Object.assign(updateRule, {
                    applicationId: appCredential.applicationId
                });
                updateRequests = payload.map(function (value) {
                    value.query.return = (options === null || options === void 0 ? void 0 : options.returnFields) ? options.returnFields : [];
                    Object.assign(value.query, {
                        update: value.update
                    });
                    return value.query;
                });
                Object.assign(updateRule, (_a = {},
                    _a["update" + domain] = updateRequests,
                    _a));
                return [2 /*return*/, this.addToken(updateRule)];
            });
        });
    };
    RulesController.prototype.aggregateRule = function (domain, pipeline, appCredentials, options) {
        return __awaiter(this, void 0, void 0, function () {
            var aggregateRule;
            var _a;
            return __generator(this, function (_b) {
                aggregateRule = {};
                if (options && (options === null || options === void 0 ? void 0 : options.useMasterKey) === true) {
                    Object.assign(aggregateRule, {
                        'masterKey': appCredentials.appPassword
                    });
                }
                Object.assign(aggregateRule, (_a = {
                        applicationId: appCredentials.applicationId
                    },
                    _a["aggregate" + domain] = pipeline,
                    _a));
                return [2 /*return*/, this.addToken(aggregateRule)];
            });
        });
    };
    RulesController.prototype.queryRule = function (domain, queryModel, appCredentials, options) {
        return __awaiter(this, void 0, void 0, function () {
            var queryRule;
            var _a;
            return __generator(this, function (_b) {
                queryRule = {};
                if (options && (options === null || options === void 0 ? void 0 : options.useMasterKey) === true) {
                    Object.assign(queryRule, {
                        'masterKey': appCredentials.appPassword
                    });
                }
                queryModel.return = (options === null || options === void 0 ? void 0 : options.returnFields) ? options.returnFields : [];
                Object.assign(queryRule, (_a = {
                        applicationId: appCredentials.applicationId
                    },
                    _a["query" + domain] = queryModel,
                    _a));
                return [2 /*return*/, this.addToken(queryRule)];
            });
        });
    };
    RulesController.prototype.bulk = function (transactions, appCredentials, options) {
        return __awaiter(this, void 0, void 0, function () {
            var transactionRule, _i, transactions_1, value, createRule, updateRule, updateRule, deleteQuery;
            var _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        transactionRule = {
                            transaction: {
                                commit: {}
                            }
                        };
                        if (options && (options === null || options === void 0 ? void 0 : options.useMasterKey) === true) {
                            Object.assign(transactionRule, {
                                masterKey: appCredentials.appPassword
                            });
                        }
                        Object.assign(transactionRule, {
                            applicationId: appCredentials.applicationId,
                        });
                        _i = 0, transactions_1 = transactions;
                        _e.label = 1;
                    case 1:
                        if (!(_i < transactions_1.length)) return [3 /*break*/, 11];
                        value = transactions_1[_i];
                        if (!(value.action === "create")) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.createRule(value.domain, value.data, appCredentials, options)];
                    case 2:
                        createRule = _e.sent();
                        Object.assign(transactionRule.transaction.commit, (_a = {},
                            _a["" + value.action + value.domain] = createRule["" + value.action + value.domain],
                            _a));
                        return [3 /*break*/, 10];
                    case 3:
                        if (!(value.action === "update")) return [3 /*break*/, 8];
                        if (!(value.data && Array.isArray(value.data))) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.updateManyRule(value.domain, value.data, appCredentials, options)];
                    case 4:
                        updateRule = _e.sent();
                        Object.assign(transactionRule.transaction.commit, (_b = {},
                            _b["" + value.action + value.domain] = updateRule["" + value.action + value.domain],
                            _b));
                        return [3 /*break*/, 7];
                    case 5:
                        if (!(value.data && value.data.query && value.data.update)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.updateRule(value.domain, value.data.query, value.data.update, value.data.upsert, appCredentials, options)];
                    case 6:
                        updateRule = _e.sent();
                        Object.assign(transactionRule.transaction.commit, (_c = {},
                            _c["" + value.action + value.domain] = updateRule["" + value.action + value.domain],
                            _c));
                        _e.label = 7;
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        if (!(value.action === "delete" && value.data && value.data.query)) return [3 /*break*/, 10];
                        return [4 /*yield*/, this.deleteRule(value.domain, value.data.query, appCredentials, options)];
                    case 9:
                        deleteQuery = _e.sent();
                        Object.assign(transactionRule.transaction.commit, (_d = {},
                            _d["" + value.action + value.domain] = deleteQuery["" + value.action + value.domain],
                            _d));
                        _e.label = 10;
                    case 10:
                        _i++;
                        return [3 /*break*/, 1];
                    case 11: return [2 /*return*/, this.addToken(transactionRule)];
                }
            });
        });
    };
    RulesController.prototype.storage = function (action, payload, appCredentials, options) {
        return __awaiter(this, void 0, void 0, function () {
            var storageRule;
            var _a;
            return __generator(this, function (_b) {
                storageRule = {};
                if (options && (options === null || options === void 0 ? void 0 : options.useMasterKey) === true) {
                    Object.assign(storageRule, {
                        'masterKey': appCredentials.appPassword
                    });
                }
                Object.assign(storageRule, {
                    applicationId: appCredentials.applicationId,
                    files: (_a = {},
                        _a[action] = payload,
                        _a)
                });
                return [2 /*return*/, this.addToken(storageRule)];
            });
        });
    };
    RulesController.prototype.addToken = function (rule) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // const token = await this.authController.getToken();
                // Object.assign(rule, {
                //     token
                // });
                return [2 /*return*/, rule];
            });
        });
    };
    return RulesController;
}());
exports.RulesController = RulesController;
