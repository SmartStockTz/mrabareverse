"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryController = exports.QueryOrder = void 0;
var socket_controller_1 = require("./socket.controller");
var update_controller_1 = require("./update.controller");
var database_changes_controller_1 = require("./database-changes.controller");
var data_util_1 = require("../utils/data.util");
var bfast_1 = require("../bfast");
var QueryOrder;
(function (QueryOrder) {
    QueryOrder["ASCENDING"] = "asc";
    QueryOrder["DESCENDING"] = "desc";
})(QueryOrder = exports.QueryOrder || (exports.QueryOrder = {}));
var QueryController = /** @class */ (function () {
    function QueryController(domain, httpClientController, rulesController, authController, appName) {
        this.domain = domain;
        this.httpClientController = httpClientController;
        this.rulesController = rulesController;
        this.authController = authController;
        this.appName = appName;
        this.query = {
            id: undefined,
            filter: {},
            return: [],
            skip: 0,
            hashes: [],
            cids: false,
            orderBy: [{ 'createdAt': -1 }],
            count: false,
        };
    }
    QueryController.prototype.orderBy = function (field, value) {
        var _a;
        var _b;
        if (value === void 0) { value = 'asc'; }
        var _value = 1;
        if (value === "asc") {
            _value = 1;
        }
        if (value === "desc") {
            _value = -1;
        }
        // if (this?.query?.filter[field]?.$fn) {
        //     Object.assign(this.query.filter[field], {
        //         $orderBy: value
        //     });
        // } else {
        //     Object.assign(this.query.filter, {
        //         [field]: {
        //             $fn: 'return true',
        //             $orderBy: value
        //         }
        //     });
        // }
        // if (typeof options?.limit === "number"){
        //     Object.assign(this.query.filter[field], {
        //         $limit: options.limit
        //     });
        // }
        // if (typeof options?.skip === "number"){
        //     Object.assign(this.query.filter[field], {
        //         $skip: options.skip
        //     });
        // }
        // return this.find(options);
        (_b = this.query.orderBy) === null || _b === void 0 ? void 0 : _b.push((_a = {}, _a[field] = _value, _a));
        return this;
    };
    QueryController.prototype.cids = function (value) {
        this.query.cids = value;
        return this;
    };
    QueryController.prototype.byId = function (id) {
        this.query.id = id;
        return this;
    };
    QueryController.prototype.count = function (countQuery) {
        if (countQuery === void 0) { countQuery = false; }
        this.query.count = countQuery;
        return this;
    };
    QueryController.prototype.size = function (size) {
        this.query.size = size;
        return this;
    };
    QueryController.prototype.skip = function (skip) {
        this.query.skip = skip;
        return this;
    };
    QueryController.prototype.equalTo = function (field, value) {
        if (!this.query.filter.hasOwnProperty(field)) {
            this.query.filter[field] = {};
        }
        Object.assign(this.query.filter[field], {
            $eq: value
        });
        return this;
    };
    QueryController.prototype.hashes = function (localDataHashes) {
        Object.assign(this.query, {
            hashes: localDataHashes
        });
        return this;
    };
    QueryController.prototype.notEqualTo = function (field, value) {
        if (!this.query.filter.hasOwnProperty(field)) {
            this.query.filter[field] = {};
        }
        Object.assign(this.query.filter[field], {
            $ne: value
        });
        return this;
    };
    QueryController.prototype.greaterThan = function (field, value) {
        if (!this.query.filter.hasOwnProperty(field)) {
            this.query.filter[field] = {};
        }
        Object.assign(this.query.filter[field], {
            $gt: value
        });
        return this;
    };
    QueryController.prototype.greaterThanOrEqual = function (field, value) {
        if (!this.query.filter.hasOwnProperty(field)) {
            this.query.filter[field] = {};
        }
        Object.assign(this.query.filter[field], {
            $gte: value
        });
        return this;
    };
    QueryController.prototype.includesIn = function (field, value) {
        if (!this.query.filter.hasOwnProperty(field)) {
            this.query.filter[field] = {};
        }
        Object.assign(this.query.filter[field], {
            $in: value
        });
        return this;
    };
    QueryController.prototype.notIncludesIn = function (field, value) {
        if (!this.query.filter.hasOwnProperty(field)) {
            this.query.filter[field] = {};
        }
        Object.assign(this.query.filter[field], {
            $nin: value
        });
        return this;
    };
    QueryController.prototype.lessThan = function (field, value) {
        if (!this.query.filter.hasOwnProperty(field)) {
            this.query.filter[field] = {};
        }
        Object.assign(this.query.filter[field], {
            $lt: value
        });
        return this;
    };
    QueryController.prototype.lessThanOrEqual = function (field, value) {
        if (!this.query.filter.hasOwnProperty(field)) {
            this.query.filter[field] = {};
        }
        Object.assign(this.query.filter[field], {
            $lte: value
        });
        return this;
    };
    QueryController.prototype.exists = function (field) {
        if (!this.query.filter.hasOwnProperty(field)) {
            this.query.filter[field] = {};
        }
        Object.assign(this.query.filter[field], {
            $exists: true
        });
        return this;
    };
    QueryController.prototype.searchByRegex = function (field, regex, flags) {
        if (flags === void 0) { flags = 'ig'; }
        if (!this.query.filter.hasOwnProperty(field)) {
            this.query.filter[field] = {};
        }
        Object.assign(this.query.filter[field], {
            $regex: regex,
            $options: flags
        });
        return this;
    };
    // fullTextSearch(field: string, text: string, flags = 'ig'): QueryController {
    //     Object.assign(this.query.filter, {
    //         [field]: {
    //             $fn: `return it?.toString()?.match(new RegExp(${text}, ${flags})) !== null;`
    //         }
    //     });
    //     return this;
    // }
    QueryController.prototype.raw = function (query, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.query.filter = query;
                return [2 /*return*/, this.find(options)];
            });
        });
    };
    QueryController.prototype.buildQuery = function () {
        return this.query;
    };
    QueryController.prototype.delete = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var credential, deleteRule, response, _a, _b, _c;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        credential = (0, bfast_1.getConfig)().credential(this.appName);
                        return [4 /*yield*/, this.rulesController.deleteRule(this.domain, this.buildQuery(), credential, options)];
                    case 1:
                        deleteRule = _e.sent();
                        _b = (_a = this.httpClientController).post;
                        _c = [(0, bfast_1.getConfig)().databaseURL(this.appName),
                            deleteRule,
                            {
                                headers: {}
                            }];
                        _d = {
                            context: this.domain,
                            rule: "delete" + this.domain,
                            type: 'daas'
                        };
                        return [4 /*yield*/, this.authController.getToken()];
                    case 2: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.token = _e.sent(),
                                _d)]))];
                    case 3:
                        response = _e.sent();
                        return [2 /*return*/, (0, data_util_1.extractResultFromServer)(response.data, 'delete', this.domain)];
                }
            });
        });
    };
    QueryController.prototype.updateBuilder = function () {
        return new update_controller_1.UpdateController(this.domain, this.buildQuery(), this.appName, this.httpClientController, this.rulesController, this.authController);
    };
    QueryController.prototype.changes = function (onConnect, onDisconnect, options) {
        var _this = this;
        if (options === void 0) { options = { useMasterKey: false }; }
        var applicationId = (0, bfast_1.getConfig)().credential(this.appName).applicationId;
        var projectId = (0, bfast_1.getConfig)().credential(this.appName).projectId;
        var masterKey = (0, bfast_1.getConfig)().credential(this.appName).appPassword;
        var match;
        if (this.buildQuery() && typeof this.buildQuery().filter === "object") {
            match = this.buildQuery().filter;
            Object.keys(match).forEach(function (key) {
                match["fullDocument." + key] = match[key];
                delete match[key];
            });
        }
        var socketController = new socket_controller_1.SocketController('/v2/__changes__', this.appName, function () {
            if (onConnect && typeof onConnect === "function") {
                onConnect();
            }
            socketController.emit({
                auth: {
                    applicationId: applicationId,
                    topic: projectId + "_" + _this.domain,
                    masterKey: options.useMasterKey === true ? masterKey : null
                },
                body: {
                    domain: _this.domain, pipeline: []
                }
            });
        }, onDisconnect);
        return new database_changes_controller_1.DatabaseChangesController(socketController);
    };
    QueryController.prototype.find = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var queryRule;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.rulesController.queryRule(this.domain, this.buildQuery(), (0, bfast_1.getConfig)().credential(this.appName), options)];
                    case 1:
                        queryRule = _a.sent();
                        return [2 /*return*/, this.queryRuleRequest(queryRule)];
                }
            });
        });
    };
    QueryController.prototype.queryRuleRequest = function (queryRule) {
        return __awaiter(this, void 0, void 0, function () {
            var response, _a, _b, _c, data, errors_1, queryError_1;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _b = (_a = this.httpClientController).post;
                        _c = [(0, bfast_1.getConfig)().databaseURL(this.appName),
                            queryRule,
                            {}];
                        _d = {
                            context: this.domain,
                            rule: "query" + this.domain,
                            type: 'daas'
                        };
                        return [4 /*yield*/, this.authController.getToken()];
                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.token = _e.sent(),
                                _d)]))];
                    case 2:
                        response = _e.sent();
                        data = response.data;
                        if (data && data["query" + this.domain] !== undefined) {
                            return [2 /*return*/, data["query" + this.domain]];
                        }
                        else {
                            errors_1 = data.errors;
                            queryError_1 = { message: "Query not succeed" };
                            Object.keys(errors_1 && typeof errors_1 === "object" ? errors_1 : {}).forEach(function (value) {
                                if (value.includes('query')) {
                                    queryError_1 = errors_1[value];
                                }
                            });
                            queryError_1['errors'] = errors_1;
                            throw queryError_1;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    QueryController.parseFnValue = function (value) {
        var parsed = '';
        switch (typeof value) {
            case "string":
                parsed = "'" + value + "'";
                break;
            case "number":
                parsed = "" + value;
                break;
            case "object":
                parsed = "JSON.parse('" + JSON.stringify(value) + "')";
                break;
            default:
                return parsed;
        }
        return parsed;
    };
    return QueryController;
}());
exports.QueryController = QueryController;
