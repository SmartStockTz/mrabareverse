"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageController = void 0;
var conf_1 = require("../conf");
var platform_util_1 = require("../utils/platform.util");
// @ts-ignore
var form_data_1 = __importDefault(require("form-data"));
var bfast_1 = require("../bfast");
var StorageController = /** @class */ (function () {
    function StorageController(httpClientController, auth, rulesController, authController, appName) {
        if (appName === void 0) { appName = conf_1.BFastConfig.DEFAULT_APP; }
        this.httpClientController = httpClientController;
        this.auth = auth;
        this.rulesController = rulesController;
        this.authController = authController;
        this.appName = appName;
    }
    StorageController.prototype.save = function (file, uploadProgress, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!platform_util_1.isBrowserLike) {
                    try {
                        if (file && file.filename && file.data) {
                            return [2 /*return*/, this._handleFileUploadInNode(file, uploadProgress, (0, bfast_1.getConfig)().credential(this.appName), options)];
                        }
                        else {
                            throw new Error('file object to save is invalid, data and filename is required field');
                        }
                    }
                    catch (e) {
                        console.log(e);
                        throw e;
                    }
                }
                else {
                    if (file && file.data && file.data instanceof File && file.filename) {
                        return [2 /*return*/, this._handleFileUploadInWeb(file, uploadProgress, (0, bfast_1.getConfig)().credential(this.appName), options)];
                    }
                    else {
                        throw new Error('file object to save is invalid, data and filename is required field');
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    StorageController.prototype.list = function (query, options) {
        if (query === void 0) { query = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var filesRule;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.rulesController.storage("list", query, (0, bfast_1.getConfig)().credential(this.appName), options)];
                    case 1:
                        filesRule = _a.sent();
                        return [2 /*return*/, this._handleFileRuleRequest(filesRule, 'list')];
                }
            });
        });
    };
    StorageController.prototype.getUrl = function (filename) {
        var config = (0, bfast_1.getConfig)();
        return config.databaseURL(this.appName, '') + "/storage/" + config.credential(this.appName).applicationId + "/file/" + filename;
    };
    StorageController.prototype.delete = function (filename, options) {
        return __awaiter(this, void 0, void 0, function () {
            var filesRule;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.rulesController.storage("delete", { filename: filename }, (0, bfast_1.getConfig)().credential(this.appName), options)];
                    case 1:
                        filesRule = _a.sent();
                        return [2 /*return*/, this._handleFileRuleRequest(filesRule, 'delete')];
                }
            });
        });
    };
    StorageController.prototype._handleFileRuleRequest = function (storageRule, action) {
        return __awaiter(this, void 0, void 0, function () {
            var credential, response, _a, _b, _c, data, errors;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        credential = (0, bfast_1.getConfig)().credential(this.appName);
                        _b = (_a = this.httpClientController).post;
                        _c = [(0, bfast_1.getConfig)().databaseURL(this.appName),
                            storageRule,
                            {
                                headers: {
                                    'x-bfast-application-id': credential.applicationId
                                }
                            }];
                        _d = {
                            context: '_Storage',
                            rule: 'storage',
                            type: 'daas'
                        };
                        return [4 /*yield*/, this.authController.getToken()];
                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.token = _e.sent(),
                                _d)]))];
                    case 2:
                        response = _e.sent();
                        data = response.data;
                        if (data && data.files && data.files.list && Array.isArray(data.files.list)) {
                            return [2 /*return*/, data.files.list];
                        }
                        else {
                            errors = data.errors;
                            throw errors && errors["files." + action] ? errors["files." + action] : {
                                message: 'Fails to process your request',
                                errors: errors
                            };
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    StorageController.prototype._fileUploadRequest = function (formData, headers, applicationId, progress, options) {
        return __awaiter(this, void 0, void 0, function () {
            var query, _a, _b, _c;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        query = {};
                        Object.assign(query, {
                            pn: options.pn ? options.pn : false,
                        });
                        if (options.filename) {
                            Object.assign(query, {
                                filename: options.filename
                            });
                        }
                        _b = (_a = this.httpClientController).post;
                        _c = [(0, bfast_1.getConfig)().databaseURL(this.appName, '/storage/' + applicationId),
                            formData,
                            {
                                onUploadProgress: progress,
                                headers: headers,
                                params: query
                            }];
                        _d = {
                            context: '_Storage',
                            rule: 'storage',
                            type: 'daas'
                        };
                        return [4 /*yield*/, this.authController.getToken()];
                    case 1: return [2 /*return*/, _b.apply(_a, _c.concat([(_d.token = _e.sent(),
                                _d)]))];
                }
            });
        });
    };
    StorageController.prototype._handleFileUploadInNode = function (file, uploadProgress, appCredentials, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var headers, token, formData, response, databaseUrl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headers = {};
                        if (options && (options === null || options === void 0 ? void 0 : options.useMasterKey) === true) {
                            Object.assign(headers, {
                                'masterKey': appCredentials.appPassword
                            });
                        }
                        return [4 /*yield*/, this.auth.getToken()];
                    case 1:
                        token = _a.sent();
                        formData = new form_data_1.default();
                        formData.append('file', file.data, {
                            filename: file.filename
                        });
                        Object.assign(headers, __assign({ 'Authorization': "Bearer " + token }, formData.getHeaders()));
                        options.pn = file.pn;
                        options.filename = file.filename;
                        return [4 /*yield*/, this._fileUploadRequest(formData, headers, appCredentials.applicationId, uploadProgress, options)];
                    case 2:
                        response = _a.sent();
                        databaseUrl = (0, bfast_1.getConfig)().databaseURL(this.appName, '');
                        return [2 /*return*/, databaseUrl + response.data.urls[0]];
                }
            });
        });
    };
    StorageController.prototype._handleFileUploadInWeb = function (file, uploadProgress, appCredentials, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var headers, token, formData, response, databaseUrl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headers = {};
                        if (options && (options === null || options === void 0 ? void 0 : options.useMasterKey) === true) {
                            Object.assign(headers, {
                                'masterKey': appCredentials.appPassword
                            });
                        }
                        return [4 /*yield*/, this.auth.getToken()];
                    case 1:
                        token = _a.sent();
                        Object.assign(headers, {
                            'Authorization': "Bearer " + token
                        });
                        formData = new form_data_1.default();
                        formData.append('file', file.data, file.filename);
                        options.pn = file.pn;
                        options.filename = file.filename;
                        return [4 /*yield*/, this._fileUploadRequest(formData, headers, appCredentials.applicationId, uploadProgress, options)];
                    case 2:
                        response = _a.sent();
                        databaseUrl = (0, bfast_1.getConfig)().databaseURL(this.appName, '');
                        return [2 /*return*/, databaseUrl + response.data.urls[0]];
                }
            });
        });
    };
    return StorageController;
}());
exports.StorageController = StorageController;
