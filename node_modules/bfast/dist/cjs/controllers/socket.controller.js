"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SocketController = void 0;
var conf_1 = require("../conf");
//@ts-ignore
var socket_io_client_1 = require("socket.io-client");
var bfast_1 = require("../bfast");
var SocketController = /** @class */ (function () {
    function SocketController(eventName, appName, onConnect, onDisconnect) {
        if (appName === void 0) { appName = conf_1.BFastConfig.DEFAULT_APP; }
        this.eventName = eventName;
        var namespace = String(eventName)[0] === "/" ? eventName : "/" + eventName;
        var url = namespace.trim().startsWith("/v2/__")
            ? (0, bfast_1.getConfig)().databaseURL(appName, namespace)
            : (0, bfast_1.getConfig)().functionsURL(namespace, appName);
        this.socket = (0, socket_io_client_1.io)(url, {
            autoConnect: false,
            reconnection: true,
            reconnectionAttempts: Infinity,
            reconnectionDelay: 2000,
            reconnectionDelayMax: 5000,
            randomizationFactor: 0.5,
            transports: ["websocket"]
        });
        if (onConnect)
            this.socket.on("connect", onConnect);
        if (onDisconnect)
            this.socket.on("disconnect", onDisconnect);
        this.open();
    }
    /**
     *
     * @param request {
     *     auth: any, // your auth data
     *     body: any // your data must be passed in this field
     * }
     */
    SocketController.prototype.emit = function (request) {
        if (typeof request === "object" && request.body !== undefined) {
            this.socket.emit(this.eventName, request);
        }
        else {
            throw "Please provide a request object with at least a body property `{ body: any }`";
        }
    };
    /**
     * add listener on this socket
     * @param handler {Function} example `listener((response)=>console.log(response.body))`
     */
    SocketController.prototype.listener = function (handler) {
        if (typeof handler === "function") {
            this.socket.on(this.eventName, handler);
        }
        else {
            throw "Function required";
        }
    };
    SocketController.prototype.close = function () {
        if (this.socket.connected) {
            this.socket.disconnect();
        }
    };
    SocketController.prototype.open = function () {
        if (this.socket.disconnected) {
            this.socket.open();
        }
    };
    return SocketController;
}());
exports.SocketController = SocketController;
