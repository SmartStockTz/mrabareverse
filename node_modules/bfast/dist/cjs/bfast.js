"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.storage = exports.auth = exports.cache = exports.functions = exports.database = exports.getConfig = exports.init = void 0;
var conf_1 = require("./conf");
var storage_controller_1 = require("./controllers/storage.controller");
var auth_controller_1 = require("./controllers/auth.controller");
var cache_controller_1 = require("./controllers/cache.controller");
var http_client_controller_1 = require("./controllers/http-client.controller");
var rules_controller_1 = require("./controllers/rules.controller");
var bfast_database_1 = require("./bfast.database");
var bfast_functions_1 = require("./bfast.functions");
var cache_adapter_factory_1 = require("./factories/cache-adapter.factory");
var http_adapter_factory_1 = require("./factories/http-adapter.factory");
var auth_adapter_factory_1 = require("./factories/auth-adapter.factory");
function init(options, appName) {
    if (appName === void 0) { appName = conf_1.BFastConfig.DEFAULT_APP; }
    getConfig().setCredential(options, appName);
}
exports.init = init;
function getConfig() {
    return conf_1.BFastConfig.getInstance();
}
exports.getConfig = getConfig;
function database(appName) {
    if (appName === void 0) { appName = conf_1.BFastConfig.DEFAULT_APP; }
    var config = getConfig();
    var authCache = new cache_controller_1.CacheController(appName, config.DEFAULT_CACHE_DB_BFAST, config.DEFAULT_CACHE_COLLECTION_USER, (0, cache_adapter_factory_1.cacheAdapter)(appName));
    var restController = new http_client_controller_1.HttpClientController(appName, (0, http_adapter_factory_1.httpAdapter)(config, appName));
    var authController = new auth_controller_1.AuthController(appName, authCache, (0, auth_adapter_factory_1.authAdapter)(config, appName));
    var rulesController = new rules_controller_1.RulesController();
    return new bfast_database_1.BfastDatabase(appName, restController, rulesController, authController);
}
exports.database = database;
function functions(appName) {
    if (appName === void 0) { appName = conf_1.BFastConfig.DEFAULT_APP; }
    // @ts-ignore
    return new bfast_functions_1.BfastFunctions(appName, null, null);
}
exports.functions = functions;
function cache(options, appName) {
    if (appName === void 0) { appName = conf_1.BFastConfig.DEFAULT_APP; }
    var config = getConfig();
    var databaseName = (options && options.database)
        ? options.database
        : config.DEFAULT_CACHE_DB_BFAST;
    var collectionName = (options && options.collection)
        ? options.collection
        : config.DEFAULT_CACHE_COLLECTION_CACHE;
    return new cache_controller_1.CacheController(appName, databaseName, collectionName, (0, cache_adapter_factory_1.cacheAdapter)(appName));
}
exports.cache = cache;
function auth(appName) {
    if (appName === void 0) { appName = conf_1.BFastConfig.DEFAULT_APP; }
    var config = getConfig();
    var cacheController = new cache_controller_1.CacheController(appName, config.DEFAULT_CACHE_DB_BFAST, config.DEFAULT_CACHE_COLLECTION_USER, (0, cache_adapter_factory_1.cacheAdapter)(appName));
    return new auth_controller_1.AuthController(appName, cacheController, (0, auth_adapter_factory_1.authAdapter)(config, appName));
}
exports.auth = auth;
function storage(appName) {
    if (appName === void 0) { appName = conf_1.BFastConfig.DEFAULT_APP; }
    var config = getConfig();
    var authCacheController = new cache_controller_1.CacheController(appName, config.DEFAULT_CACHE_DB_BFAST, config.DEFAULT_CACHE_COLLECTION_USER, (0, cache_adapter_factory_1.cacheAdapter)(appName));
    var authController = new auth_controller_1.AuthController(appName, authCacheController, (0, auth_adapter_factory_1.authAdapter)(config, appName));
    var rulesController = new rules_controller_1.RulesController();
    return new storage_controller_1.StorageController(new http_client_controller_1.HttpClientController(appName, (0, http_adapter_factory_1.httpAdapter)(config, appName)), authController, rulesController, authController, appName);
}
exports.storage = storage;
