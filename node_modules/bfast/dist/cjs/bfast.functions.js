"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BfastFunctions = void 0;
var functions_controller_1 = require("./controllers/functions.controller");
var http_client_controller_1 = require("./controllers/http-client.controller");
var socket_controller_1 = require("./controllers/socket.controller");
var auth_controller_1 = require("./controllers/auth.controller");
var cache_controller_1 = require("./controllers/cache.controller");
var platform_util_1 = require("./utils/platform.util");
var cache_adapter_factory_1 = require("./factories/cache-adapter.factory");
var http_adapter_factory_1 = require("./factories/http-adapter.factory");
var auth_adapter_factory_1 = require("./factories/auth-adapter.factory");
var bfast_1 = require("./bfast");
var BfastFunctions = /** @class */ (function () {
    function BfastFunctions(appName, authController, httpClientController) {
        this.appName = appName;
        this.authController = authController;
        this.httpClientController = httpClientController;
    }
    BfastFunctions.prototype.init = function () {
        var config = (0, bfast_1.getConfig)();
        var authCache = new cache_controller_1.CacheController(this.appName, config.DEFAULT_CACHE_DB_BFAST, config.DEFAULT_CACHE_COLLECTION_USER, (0, cache_adapter_factory_1.cacheAdapter)(this.appName));
        var restController = new http_client_controller_1.HttpClientController(this.appName, (0, http_adapter_factory_1.httpAdapter)(config, this.appName));
        var authController = new auth_controller_1.AuthController(this.appName, authCache, (0, auth_adapter_factory_1.authAdapter)(config, this.appName));
        if (!this.authController) {
            this.authController = authController;
        }
        if (!this.httpClientController) {
            this.httpClientController = restController;
        }
    };
    /**
     * exec a http client request
     * @param path {string} function name
     */
    BfastFunctions.prototype.request = function (path) {
        this.init();
        return new functions_controller_1.FunctionsController(path, this.httpClientController, this.authController, this.appName);
    };
    /**
     * listen for a realtime event from a bfast::functions
     * @param eventName
     * @param onConnect {function} callback when connection established
     * @param onDisconnect {function} callback when connection terminated
     */
    BfastFunctions.prototype.event = function (eventName, onConnect, onDisconnect) {
        return new socket_controller_1.SocketController(eventName, this.appName, onConnect, onDisconnect);
    };
    BfastFunctions.prototype.onHttpRequest = function (path, handler) {
        if (platform_util_1.isNode) {
            return {
                method: null,
                path: path,
                onRequest: handler
            };
        }
        else {
            throw 'Works In NodeJs Environment Only';
        }
    };
    BfastFunctions.prototype.onPostHttpRequest = function (path, handler) {
        if (platform_util_1.isNode) {
            return {
                method: 'POST',
                path: path,
                onRequest: handler
            };
        }
        else {
            throw 'Works In NodeJs Environment Only';
        }
    };
    BfastFunctions.prototype.onPutHttpRequest = function (path, handler) {
        if (platform_util_1.isNode) {
            return {
                method: 'PUT',
                path: path,
                onRequest: handler
            };
        }
        else {
            throw 'Works In NodeJs Environment Only';
        }
    };
    BfastFunctions.prototype.onDeleteHttpRequest = function (path, handler) {
        if (platform_util_1.isNode) {
            return {
                method: 'DELETE',
                path: path,
                onRequest: handler
            };
        }
        else {
            throw 'Works In NodeJs Environment Only';
        }
    };
    BfastFunctions.prototype.onGetHttpRequest = function (path, handler) {
        if (platform_util_1.isNode) {
            return {
                method: 'GET',
                path: path,
                onRequest: handler
            };
        }
        else {
            throw 'Works In NodeJs Environment Only';
        }
    };
    BfastFunctions.prototype.onEvent = function (path, handler) {
        if (platform_util_1.isNode) {
            return {
                name: path,
                onEvent: handler
            };
        }
        else {
            throw 'Works In NodeJs Environment Only';
        }
    };
    BfastFunctions.prototype.onGuard = function (path, handler) {
        if (platform_util_1.isNode) {
            return {
                path: path,
                onGuard: handler
            };
        }
        else {
            throw 'Works In NodeJs Environment Only';
        }
    };
    BfastFunctions.prototype.onJob = function (schedule, handler) {
        var defaultRule = { second: '*', minute: '*', month: '*', day: '*', dayOfWeek: '*', hour: '*' };
        Object.keys(schedule).forEach(function (key) {
            delete defaultRule[key];
        });
        Object.assign(schedule, defaultRule);
        // @ts-ignore
        var rule = Object.keys(schedule).map(function (x) { return schedule[x]; }).join(' ');
        if (platform_util_1.isNode) {
            return {
                onJob: handler,
                rule: rule,
            };
        }
        else {
            throw 'Works In NodeJs Environment Only';
        }
    };
    return BfastFunctions;
}());
exports.BfastFunctions = BfastFunctions;
