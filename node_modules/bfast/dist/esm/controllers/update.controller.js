var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { extractResultFromServer } from "../utils/data.util";
import { getConfig } from '../bfast';
var UpdateController = /** @class */ (function () {
    function UpdateController(domain, queryModel, appName, httpClientController, rulesController, authController) {
        this.domain = domain;
        this.queryModel = queryModel;
        this.appName = appName;
        this.httpClientController = httpClientController;
        this.rulesController = rulesController;
        this.authController = authController;
        this.updateModel = {
            $set: {},
            $inc: {},
            $unset: {}
        };
        this._upsert = false;
    }
    UpdateController.prototype.set = function (field, value) {
        var _a;
        if (field === 'id' || field === '_id') {
            if (!this.queryModel.filter) {
                this.queryModel.filter = {};
            }
            this.queryModel.filter.id = value;
            return this;
        }
        Object.assign(this.updateModel.$set, (_a = {},
            _a[field] = value,
            _a));
        return this;
    };
    UpdateController.prototype.unset = function (field) {
        var _a;
        if (field === 'id' || field === '_id') {
            return this;
        }
        Object.assign(this.updateModel.$unset, (_a = {},
            _a[field] = 1,
            _a));
        return this;
    };
    UpdateController.prototype.upsert = function (value) {
        if (value === void 0) { value = false; }
        this._upsert = value;
        return this;
    };
    UpdateController.prototype.doc = function (doc) {
        Object.assign(this.updateModel.$set, doc);
        return this;
    };
    UpdateController.prototype.increment = function (field, amount) {
        var _a;
        if (amount === void 0) { amount = 1; }
        Object.assign(this.updateModel.$inc, (_a = {},
            _a[field] = amount,
            _a));
        return this;
    };
    UpdateController.prototype.decrement = function (field, amount) {
        if (amount === void 0) { amount = 1; }
        return this.increment(field, -amount);
    };
    UpdateController.prototype.build = function () {
        return this.updateModel;
    };
    UpdateController.prototype.update = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var credential, updateRule, response, _a, _b, _c;
            var _d;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        credential = getConfig().credential(this.appName);
                        Object.keys(this.updateModel).forEach(function (key) {
                            try {
                                // @ts-ignore
                                if (typeof _this.updateModel[key] === "object" && Object.keys(_this.updateModel[key]).length === 0) {
                                    // @ts-ignore
                                    delete _this.updateModel[key];
                                }
                            }
                            catch (__23) {
                                console.log(__23);
                            }
                        });
                        return [4 /*yield*/, this.rulesController.updateRule(this.domain, this.queryModel, this.build(), this._upsert, credential, options)];
                    case 1:
                        updateRule = _e.sent();
                        _b = (_a = this.httpClientController).post;
                        _c = [getConfig().databaseURL(this.appName),
                            updateRule,
                            {}];
                        _d = {
                            context: this.domain,
                            rule: "update" + this.domain,
                            type: 'daas'
                        };
                        return [4 /*yield*/, this.authController.getToken()];
                    case 2: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.token = _e.sent(),
                                _d)]))];
                    case 3:
                        response = _e.sent();
                        return [2 /*return*/, extractResultFromServer(response.data, 'update', this.domain)];
                }
            });
        });
    };
    return UpdateController;
}());
export { UpdateController };
