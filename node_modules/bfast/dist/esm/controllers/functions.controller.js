var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { BFastConfig } from "../conf";
import { getConfig } from '../bfast';
var FunctionsController = /** @class */ (function () {
    function FunctionsController(functionPath, httpClientController, authController, appName) {
        if (appName === void 0) { appName = BFastConfig.DEFAULT_APP; }
        this.functionPath = functionPath;
        this.httpClientController = httpClientController;
        this.authController = authController;
        this.appName = appName;
    }
    FunctionsController.prototype.post = function (body, config) {
        return __awaiter(this, void 0, void 0, function () {
            var postConfig, _a, _b, _c;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!(this.functionPath && this.functionPath !== '')) return [3 /*break*/, 2];
                        postConfig = {};
                        if (config && config.headers) {
                            Object.assign(postConfig, config);
                        }
                        else {
                            Object.assign(postConfig, config);
                        }
                        _b = (_a = this.httpClientController).post;
                        _c = [getConfig().functionsURL(this.functionPath, this.appName),
                            body ? body : {},
                            postConfig];
                        _d = {
                            context: '_Rest',
                            rule: 'functions',
                            type: 'faas'
                        };
                        return [4 /*yield*/, this.authController.getToken()];
                    case 1: return [2 /*return*/, _b.apply(_a, _c.concat([(_d.token = _e.sent(),
                                _d)])).then(function (response) {
                            return response.data;
                        }).catch(function (reason) {
                            throw reason && reason.response && reason.response.data
                                ? reason.response.data
                                : { message: reason.toString() };
                        })];
                    case 2: throw { code: -1, message: 'Please provide function path' };
                }
            });
        });
    };
    FunctionsController.prototype.delete = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var deleteConfig, _a, _b, _c;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        deleteConfig = {};
                        if (config && config.headers) {
                            Object.assign(deleteConfig, config);
                        }
                        else {
                            Object.assign(deleteConfig, config);
                        }
                        _b = (_a = this.httpClientController).delete;
                        _c = [getConfig().functionsURL(this.functionPath, this.appName),
                            deleteConfig];
                        _d = {
                            context: '_Rest',
                            rule: 'functions',
                            type: 'faas'
                        };
                        return [4 /*yield*/, this.authController.getToken()];
                    case 1: return [2 /*return*/, _b.apply(_a, _c.concat([(_d.token = _e.sent(),
                                _d)])).then(function (response) {
                            return response.data;
                        }).catch(function (reason) {
                            throw reason && reason.response && reason.response.data
                                ? reason.response.data
                                : { message: reason.toString() };
                        })];
                }
            });
        });
    };
    FunctionsController.prototype.get = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var getConfig_, _a, _b, _c;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        getConfig_ = {};
                        if (config && config.headers) {
                            Object.assign(getConfig_, config);
                        }
                        else {
                            Object.assign(getConfig_, config);
                        }
                        _b = (_a = this.httpClientController).get;
                        _c = [getConfig().functionsURL(this.functionPath, this.appName),
                            getConfig_];
                        _d = {
                            context: '_Rest',
                            rule: 'functions',
                            type: 'faas'
                        };
                        return [4 /*yield*/, this.authController.getToken()];
                    case 1: return [2 /*return*/, _b.apply(_a, _c.concat([(_d.token = _e.sent(),
                                _d)])).then(function (response) {
                            return response.data;
                        }).catch(function (reason) {
                            throw reason && reason.response && reason.response.data
                                ? reason.response.data
                                : { message: reason.toString() };
                        })];
                }
            });
        });
    };
    FunctionsController.prototype.put = function (body, config) {
        return __awaiter(this, void 0, void 0, function () {
            var putConfig, _a, _b, _c;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        putConfig = {};
                        if (config && config.headers) {
                            Object.assign(putConfig, config);
                        }
                        else {
                            Object.assign(putConfig, config);
                        }
                        _b = (_a = this.httpClientController).put;
                        _c = [getConfig().functionsURL(this.functionPath, this.appName),
                            body ? body : {},
                            putConfig];
                        _d = {
                            context: '_Rest',
                            rule: 'functions',
                            type: 'faas'
                        };
                        return [4 /*yield*/, this.authController.getToken()];
                    case 1: return [2 /*return*/, _b.apply(_a, _c.concat([(_d.token = _e.sent(),
                                _d)])).then(function (response) {
                            return response.data;
                        }).catch(function (reason) {
                            throw reason && reason.response && reason.response.data
                                ? reason.response.data
                                : { message: reason.toString() };
                        })];
                }
            });
        });
    };
    return FunctionsController;
}());
export { FunctionsController };
