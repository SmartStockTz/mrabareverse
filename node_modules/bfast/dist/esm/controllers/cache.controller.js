var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { addSyncs, getAllSyncs, getOneSyncs, getSyncsKeys, removeAllSyncs, removeOneSyncs } from '../utils/syncs.util';
import { getConfig } from '../bfast';
var CacheController = /** @class */ (function () {
    function CacheController(appName, database, collection, cacheAdapter) {
        this.appName = appName;
        this.database = database;
        this.collection = collection;
        this.cacheAdapter = cacheAdapter;
        if (database && !database.startsWith('bfast/')) {
            this.database = getConfig().cacheDatabaseName(database, appName);
        }
        this.collection = getConfig().cacheCollectionName(collection, appName);
    }
    CacheController.prototype.keys = function () {
        return __awaiter(this, void 0, void 0, function () {
            var keys;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cacheAdapter.keys(this.database, this.collection)];
                    case 1:
                        keys = _a.sent();
                        return [2 /*return*/, keys && Array.isArray(keys) ? keys : []];
                }
            });
        });
    };
    CacheController.prototype.clearAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.cacheAdapter.clearAll(this.database, this.collection)];
            });
        });
    };
    CacheController.prototype.get = function (key, options) {
        if (options === void 0) { options = { secure: false }; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // if (!key) {
                //     throw {message: 'key of the data to retrieve required'};
                // }
                return [2 /*return*/, this.cacheAdapter.get(key, this.database, this.collection)];
            });
        });
    };
    CacheController.prototype.getBulk = function (keys, options) {
        if (options === void 0) { options = { secure: false }; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!Array.isArray(keys)) {
                    throw { message: 'Array of keys required' };
                }
                return [2 /*return*/, this.cacheAdapter.getBulk(keys, this.database, this.collection)];
            });
        });
    };
    CacheController.prototype.getAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.cacheAdapter.getAll(this.database, this.collection)];
            });
        });
    };
    CacheController.prototype.query = function (filter) {
        return __awaiter(this, void 0, void 0, function () {
            var all;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAll()];
                    case 1:
                        all = _a.sent();
                        return [2 /*return*/, filter(all)];
                }
            });
        });
    };
    CacheController.prototype.set = function (key, data, options) {
        if (options === void 0) { options = { secure: false }; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // if (!key) {
                //     throw {message: 'key for the data is required'};
                // }
                // if (!data) {
                //     throw {message: 'data to save to cache required'};
                // }
                return [2 /*return*/, this.cacheAdapter.set(key, data, this.database, this.collection)];
            });
        });
    };
    CacheController.prototype.setBulk = function (keys, data, options) {
        if (options === void 0) { options = { secure: false }; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!Array.isArray(keys)) {
                    throw { message: 'Array of keys required' };
                }
                if (!Array.isArray(data)) {
                    throw { message: 'Array of data required' };
                }
                return [2 /*return*/, this.cacheAdapter.setBulk(keys, data, this.database, this.collection)];
            });
        });
    };
    CacheController.prototype.remove = function (key, force) {
        if (force === void 0) { force = true; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // if (!key) {
                //     throw {message: 'key for data to remove required'};
                // }
                return [2 /*return*/, this.cacheAdapter.remove(key, this.database, this.collection, true)];
            });
        });
    };
    CacheController.prototype.addSyncs = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, addSyncs(data, this.database, this.cacheAdapter)];
            });
        });
    };
    CacheController.prototype.removeOneSyncs = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, removeOneSyncs(key, this.database, this.cacheAdapter)];
            });
        });
    };
    CacheController.prototype.removeAllSyncs = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, removeAllSyncs(this.database, this.cacheAdapter)];
            });
        });
    };
    CacheController.prototype.getAllSyncs = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, getAllSyncs(this.database, this.cacheAdapter)];
            });
        });
    };
    CacheController.prototype.getOneSyncs = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, getOneSyncs(this.database, key, this.cacheAdapter)];
            });
        });
    };
    CacheController.prototype.getSyncsKeys = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, getSyncsKeys(this.database, this.cacheAdapter)];
            });
        });
    };
    return CacheController;
}());
export { CacheController };
