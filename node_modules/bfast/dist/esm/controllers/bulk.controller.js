var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { getConfig } from '../bfast';
var BulkController = /** @class */ (function () {
    function BulkController(appName, httpClientController, rulesController, authController) {
        this.appName = appName;
        this.httpClientController = httpClientController;
        this.rulesController = rulesController;
        this.authController = authController;
        this.transactionRequests = [];
    }
    BulkController.prototype.commit = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var result, credential, transactionRule, response, _a, _b, _c;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!(options && options.before)) return [3 /*break*/, 2];
                        return [4 /*yield*/, options.before(this.transactionRequests)];
                    case 1:
                        result = _e.sent();
                        if (result && Array.isArray(result) && result.length > 0) {
                            this.transactionRequests = result;
                        }
                        else if (result && Array.isArray(result) && result.length === 0) {
                            this.transactionRequests = result;
                        }
                        _e.label = 2;
                    case 2:
                        credential = getConfig().credential(this.appName);
                        return [4 /*yield*/, this.rulesController.bulk(this.transactionRequests, credential, { useMasterKey: options === null || options === void 0 ? void 0 : options.useMasterKey })];
                    case 3:
                        transactionRule = _e.sent();
                        _b = (_a = this.httpClientController).post;
                        _c = [getConfig().databaseURL(this.appName),
                            transactionRule,
                            {
                                headers: {
                                    'x-parse-application-id': credential.applicationId
                                }
                            }];
                        _d = {
                            context: 'bulk',
                            rule: 'bulk',
                            type: 'daas'
                        };
                        return [4 /*yield*/, this.authController.getToken()];
                    case 4: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.token = _e.sent(),
                                _d)]))];
                    case 5:
                        response = _e.sent();
                        this.transactionRequests.splice(0);
                        if (options && options.after) {
                            options.after().catch(function (_) {
                            });
                        }
                        return [2 /*return*/, BulkController._extractResultFromServer(response.data)];
                }
            });
        });
    };
    BulkController.prototype.create = function (domain, data) {
        this.transactionRequests.push({
            data: data,
            action: "create",
            domain: domain
        });
        return this;
    };
    BulkController.prototype.delete = function (domain, payload) {
        this.transactionRequests.push({
            domain: domain,
            action: "delete",
            data: payload
        });
        return this;
    };
    BulkController.prototype.update = function (domain, payload) {
        this.transactionRequests.push({
            domain: domain,
            action: "update",
            data: payload
        });
        return this;
    };
    BulkController._extractResultFromServer = function (data) {
        var _a;
        if (data && data.hasOwnProperty('transaction')) {
            (_a = data['transaction'].commit) === null || _a === void 0 ? true : delete _a.errors;
            return data.transaction.commit;
        }
        else {
            if (data && data.errors && data.errors.hasOwnProperty('transaction')) {
                throw data.errors['transaction'];
            }
            else {
                throw { message: 'Fail to process a result', errors: data.errors };
            }
        }
    };
    return BulkController;
}());
export { BulkController };
