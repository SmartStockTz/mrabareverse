var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { ConstantUtil } from "../utils/constant.util";
var AuthController = /** @class */ (function () {
    function AuthController(appName, cacheController, authAdapter) {
        this.appName = appName;
        this.cacheController = cacheController;
        this.authAdapter = authAdapter;
    }
    AuthController.prototype.authenticated = function (userId, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authAdapter.authenticated(userId, options)];
            });
        });
    };
    AuthController.prototype.currentUser = function () {
        return __awaiter(this, void 0, void 0, function () {
            var user, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 6, , 8]);
                        return [4 /*yield*/, this.cacheController.get(ConstantUtil.CURRENT_USER_IDENTIFIER, { secure: true })];
                    case 1:
                        user = _a.sent();
                        if (!!user) return [3 /*break*/, 2];
                        return [2 /*return*/, null];
                    case 2:
                        if (!(typeof user === "string")) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.setCurrentUser(null)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/, user];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1 = _a.sent();
                        return [4 /*yield*/, this.setCurrentUser(null)];
                    case 7:
                        _a.sent();
                        return [2 /*return*/, null];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    AuthController.prototype.getEmail = function () {
        return __awaiter(this, void 0, void 0, function () {
            var user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.currentUser()];
                    case 1:
                        user = _a.sent();
                        if (user && user.email) {
                            return [2 /*return*/, user.email];
                        }
                        else {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    AuthController.prototype.getToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.currentUser()];
                    case 1:
                        user = _a.sent();
                        if (user && user.token) {
                            return [2 /*return*/, user.token];
                        }
                        else {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    AuthController.prototype.getUsername = function () {
        return __awaiter(this, void 0, void 0, function () {
            var user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.currentUser()];
                    case 1:
                        user = _a.sent();
                        if (user && user.username) {
                            return [2 /*return*/, user.username];
                        }
                        else {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    AuthController.prototype.logIn = function (username, password, dtl, options) {
        if (dtl === void 0) { dtl = 6; }
        return __awaiter(this, void 0, void 0, function () {
            var user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!username) {
                            throw { message: "Username required" };
                        }
                        if (!password) {
                            throw { message: "Password required" };
                        }
                        username = username.trim();
                        password = password.trim();
                        return [4 /*yield*/, this.authAdapter.logIn(username, password, this.appName, options)];
                    case 1:
                        user = _a.sent();
                        return [4 /*yield*/, this.setCurrentUser(user, dtl)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, user];
                }
            });
        });
    };
    AuthController.prototype.logOut = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.setCurrentUser(null)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.authAdapter.logOut(options)];
                }
            });
        });
    };
    AuthController.prototype.requestPasswordReset = function (email, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!email) {
                    throw { message: "Email required to reset your account" };
                }
                return [2 /*return*/, this.authAdapter.requestPasswordReset(email, this.appName, options)];
            });
        });
    };
    AuthController.prototype.signUp = function (username, password, attrs, dtl, options) {
        if (attrs === void 0) { attrs = {}; }
        if (dtl === void 0) { dtl = 6; }
        return __awaiter(this, void 0, void 0, function () {
            var user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!username) {
                            throw { message: "Username required" };
                        }
                        if (!password) {
                            throw { message: "Password required" };
                        }
                        username = username.trim();
                        password = password.trim();
                        return [4 /*yield*/, this.authAdapter.signUp(username, password, attrs, this.appName, options)];
                    case 1:
                        user = _a.sent();
                        return [4 /*yield*/, this.setCurrentUser(user, dtl)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, user];
                }
            });
        });
    };
    AuthController.prototype.updateUser = function (userId, attrs, options) {
        if (attrs === void 0) { attrs = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!userId) {
                    throw { message: "Please provide id of user to be updated" };
                }
                return [2 /*return*/, this.authAdapter.updateUser(userId, attrs, options)];
            });
        });
    };
    AuthController.prototype.setCurrentUser = function (user, dtl) {
        if (dtl === void 0) { dtl = 6; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cacheController.set(ConstantUtil.CURRENT_USER_IDENTIFIER, user, {
                            secure: true
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, user];
                }
            });
        });
    };
    AuthController.prototype.requestEmailVerification = function (email, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!email) {
                    throw { message: "Email required" };
                }
                return [2 /*return*/, this.authAdapter.requestEmailVerification(email, this.appName, options)];
            });
        });
    };
    return AuthController;
}());
export { AuthController };
