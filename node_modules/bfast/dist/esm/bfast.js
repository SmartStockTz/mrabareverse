import { BFastConfig } from "./conf";
import { StorageController } from "./controllers/storage.controller";
import { AuthController } from "./controllers/auth.controller";
import { CacheController } from "./controllers/cache.controller";
import { HttpClientController } from "./controllers/http-client.controller";
import { RulesController } from "./controllers/rules.controller";
import { BfastDatabase } from "./bfast.database";
import { BfastFunctions } from "./bfast.functions";
import { cacheAdapter } from "./factories/cache-adapter.factory";
import { httpAdapter } from "./factories/http-adapter.factory";
import { authAdapter } from "./factories/auth-adapter.factory";
export function init(options, appName) {
    if (appName === void 0) { appName = BFastConfig.DEFAULT_APP; }
    getConfig().setCredential(options, appName);
}
export function getConfig() {
    return BFastConfig.getInstance();
}
export function database(appName) {
    if (appName === void 0) { appName = BFastConfig.DEFAULT_APP; }
    var config = getConfig();
    var authCache = new CacheController(appName, config.DEFAULT_CACHE_DB_BFAST, config.DEFAULT_CACHE_COLLECTION_USER, cacheAdapter(appName));
    var restController = new HttpClientController(appName, httpAdapter(config, appName));
    var authController = new AuthController(appName, authCache, authAdapter(config, appName));
    var rulesController = new RulesController();
    return new BfastDatabase(appName, restController, rulesController, authController);
}
export function functions(appName) {
    if (appName === void 0) { appName = BFastConfig.DEFAULT_APP; }
    // @ts-ignore
    return new BfastFunctions(appName, null, null);
}
export function cache(options, appName) {
    if (appName === void 0) { appName = BFastConfig.DEFAULT_APP; }
    var config = getConfig();
    var databaseName = (options && options.database)
        ? options.database
        : config.DEFAULT_CACHE_DB_BFAST;
    var collectionName = (options && options.collection)
        ? options.collection
        : config.DEFAULT_CACHE_COLLECTION_CACHE;
    return new CacheController(appName, databaseName, collectionName, cacheAdapter(appName));
}
export function auth(appName) {
    if (appName === void 0) { appName = BFastConfig.DEFAULT_APP; }
    var config = getConfig();
    var cacheController = new CacheController(appName, config.DEFAULT_CACHE_DB_BFAST, config.DEFAULT_CACHE_COLLECTION_USER, cacheAdapter(appName));
    return new AuthController(appName, cacheController, authAdapter(config, appName));
}
export function storage(appName) {
    if (appName === void 0) { appName = BFastConfig.DEFAULT_APP; }
    var config = getConfig();
    var authCacheController = new CacheController(appName, config.DEFAULT_CACHE_DB_BFAST, config.DEFAULT_CACHE_COLLECTION_USER, cacheAdapter(appName));
    var authController = new AuthController(appName, authCacheController, authAdapter(config, appName));
    var rulesController = new RulesController();
    return new StorageController(new HttpClientController(appName, httpAdapter(config, appName)), authController, rulesController, authController, appName);
}
